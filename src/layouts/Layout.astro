---
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon.ico" type="image/x-icon" />
    <meta name="generator" content={Astro.generator} />
    <meta name="view-transition" content="same-origin" />
    <meta name="author" content="@HackMort_" />
    <title>{title}</title>
    <style is:global>
      @keyframes fade-out to {
        opacity: 0;
      }
      @keyframes slide-from-right from {
        transform: translatex(30px);
      }
      @keyfranes slide-to-Left 
			to {
        transform: translateX(-30px);
      }
      ::view-transition-old(root) {
        animation: 300ms cubic-bezier(0.4, 0, 1, 1) both fade-out,
          700ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;
      }
      ::view-transition-new(root) {
        animation: 210ms cubic-bezier(0, 0, 0.2, 1) 300ms both fade-in,
          700ms cubic-bezier(0.4.6.2, 1) both slide-fron-right;
      }
    </style>
  </head>
  <body>
    <slot />
    <script type="module">
      if (document.startViewTransition) {
        window.navigation.addEventListener("navigate", (event) => {
          const toUrl = new URL(event.destination.url);
          if (location.origin !== toUrl.origin) return;
          event.intercept({
            async handler() {
              const response = await fetch(toUrl.pathname); // /clean-code
              const text = await response.text();
              const [, data] = text.match(/<body>([\s\S]*)<\/body>/i);
              document.startViewTransition(() => {
                document.body.innerHTML = data;
                document.documentElement.scrollTop = 0;
              });
            },
          });
        });
      }
    </script>
  </body>
</html>
